import asyncio
import logging
from dotenv import load_dotenv
import os
from aiogram import Bot, Dispatcher
from aiogram.filters.command import Command
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import types
from aiogram.types import FSInputFile
from keyboard import mode_selector, ModeSelectCallback, pass_approve, change_password, close
from IM_scripts.manual_publication_error.main import start_handpub_error
from IM_scripts.first_answer.main import start_first_answer
from IM_scripts.VDL.main import start_vdl
from IM_scripts.auth.auth import GetAuth
from redis_conf.config import RedisCheck as Redis

logging.basicConfig(level=logging.INFO)

load_dotenv()

TOKEN = os.environ.get('TOKEN')
GROUP = os.environ.get('GROUP')

storage = MemoryStorage()

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=storage)


'''–∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π'''
class Form(StatesGroup):
    mode = State()
    auth = State()
    password = State()


'''–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
def user_check(chat_member):
    if dict(chat_member)['status'] != 'left' and dict(chat_member)['status'] != 'kicked':
        return True
    else:
        return False


'''–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start'''
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if user_check(await bot.get_chat_member(chat_id=GROUP, user_id=message.from_user.id)):
        await bot.send_message(message.from_user.id, text="–í—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:", reply_markup=mode_selector())
    else:
        await bot.send_message(message.from_user.id, text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


'''–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è'''
@dp.message(Form.auth, F.text)
async def get_new_password(message: types.Message, state: FSMContext):

    await state.update_data(password=message.text)
    await message.answer(text="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å?", reply_markup=pass_approve())


'''–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏'''
@dp.callback_query(ModeSelectCallback.filter(F.type == 'mode'))
async def mode_btn_select_action(callback: types.CallbackQuery, callback_data: ModeSelectCallback):

    '''—Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'''

    if callback_data.action == 'pub_error':

        '''–±–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'''

        auth = GetAuth()
        auth.check_token()

        token = auth.check_token()

        if token:
            result = start_handpub_error(token)
            data = len(result)
            document = FSInputFile('–æ—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.txt')
            await bot.send_message(callback.message.chat.id, text='‚è≥ –ü—Ä–æ—Ü–µ—Å—Å –ø–æ—à–µ–ª...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è')
            await bot.send_message(callback.message.chat.id, text=f'‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —Å –æ—à–∏–±–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {data}')

            if document is not None:
                await bot.send_document(callback.message.chat.id, document)
        else:
            await bot.send_message(callback.message.chat.id, text=f'‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π, –æ–±–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞')

    if callback_data.action == 'auth':
        await bot.send_message(callback.message.chat.id, text='–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?',
                               reply_markup=change_password())

    '''—Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞'''

    if callback_data.action == 'first_answer':

        '''–±–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'''

        auth = GetAuth()
        auth.check_token()

        token = auth.check_token()

        await bot.send_message(callback.message.chat.id, text='‚è≥ –ü—Ä–æ—Ü–µ—Å—Å –ø–æ—à–µ–ª...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è')

        if token:
            result = start_first_answer(token)
            document = FSInputFile('–æ—Ç—á–µ—Ç –ø–æ –ø–µ—Ä–≤–∏—á–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º.txt')
            await bot.send_message(callback.message.chat.id,
                                   text=result)
            if document is not None:
                await bot.send_document(callback.message.chat.id, document)

        else:
            await bot.send_message(callback.message.chat.id,
                               text=f'‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π, –æ–±–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞')

    '''—Å–∫—Ä–ø–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫ –í–î–õ –í–ö –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞'''

    if callback_data.action == 'VDL':

        '''–±–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'''

        auth = GetAuth()
        auth.check_token()

        token = auth.check_token()

        await bot.send_message(callback.message.chat.id, text='‚è≥ –ü—Ä–æ—Ü–µ—Å—Å –ø–æ—à–µ–ª...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è')

        if token:
            result = start_vdl(token)
            await bot.send_message(callback.message.chat.id,
                                   text=result)
        else:
            await bot.send_message(callback.message.chat.id,
                                   text=f'‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π, –æ–±–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞')

'''–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è –º–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'''
@dp.callback_query(ModeSelectCallback.filter(F.type == 'auth'))
async def auth_management(callback: types.CallbackQuery, callback_data: ModeSelectCallback, state: FSMContext):

    if callback_data.action == 'change_password':

        await state.set_state(Form.auth)
        await bot.send_message(callback.message.chat.id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è rbintern.03@gmail.com', reply_markup=close())

    if callback_data.action == 'approve':

        await state.set_state(Form.password)
        data = await state.get_data()
        redis = Redis()

        if redis.update_password(new_password=data['password']):
            await bot.send_message(callback.message.chat.id,
                                   text='‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!',
                                   reply_markup=mode_selector())
            await state.clear()

        else:
            await bot.send_message(callback.message.chat.id,
                                   text='‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
            await state.clear()

    if callback_data.action == 'close':

        await bot.delete_message(callback.message.chat.id, message_id=callback.message.message_id)
        await state.clear()


    if callback_data.action == 'add_account':

        await bot.send_message(callback.message.chat.id, text="üîú –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=close())

async def main():
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    asyncio.run(main())